{"name":"Multithread.js","tagline":"In-browser multithreading made easy","body":"Multithread\r\n===========\r\n\r\nIn-browser multithreading made easy\r\n\r\nMultithread is a simple wrapper that eliminates the hassle of dealing with Web Workers and\r\ntransferrable objects.\r\n\r\nRun any code you'd like asynchronously, in its own thread, without interrupting the user experience.\r\n\r\n\r\nUsing Multithread\r\n-----------------\r\n\r\nUsing Multithread is simple. Include multithread.js on any page you'd like using\r\n```html\r\n<script src=\"my/path/to/multithread.js\"></script>\r\n```\r\n\r\nAnd instantiate it in any script tag using\r\n```js\r\nvar num_threads = 2;\r\nvar MT = new Multithread(num_threads);\r\n```\r\n\r\nMultithread will provide the best results when ```num_threads``` matches the processor core count of the computer\r\nyou're using, but 2-4 threads should always be reasonably speedy.\r\n\r\n\r\nRunning a Thread Asynchronously\r\n-------------------------------\r\n\r\nThe fun stuff! Run any code you want (in the form of a function) asynchronously, in a separate thread like so:\r\n```js\r\nMT.process(function, callback)(arg1, arg2, ..., argN);\r\n```\r\n\r\nWhere ```function``` is of the form:\r\n```js\r\nfunction(arg1, arg2, ... argN) {\r\n  /* function body */\r\n}\r\n```\r\n\r\nand ```callback``` is of the form:\r\n```js\r\nfunction(returnValue) {\r\n  /* do something with returnValue in main thread */\r\n}\r\n```\r\n\r\nNote that ```.process()``` itself will return a function object that will not execute until explicitly\r\ntold to do so.\r\n```js\r\nvar funcInADifferentThread = MT.process(\r\n  function(a, b) { return a + b; },\r\n  function(r) { console.log(r) }\r\n);\r\n\r\n// Nothing has happened,\r\n//funcInADifferentThread has not executed yet...\r\n\r\nfuncInADifferentThread(1, 2);\r\nconsole.log('Before or after?');\r\n\r\n// We now see \"Before or after?\" logged in the console,\r\n// and \"3\" (= 1 + 2) logged shortly thereafter...\r\n// it was running asynchronously\r\n```\r\n\r\nThat's it! ... Almost.\r\n\r\n\r\nScope Warning\r\n-------------\r\n\r\nKeep in mind that any threaded function is **completely scope unaware**, meaning something like:\r\n```js\r\nfunction scopeCheck() {\r\n  var scopeVar = 2;\r\n  MT.process(\r\n    function() { return scopeVar + 2; },\r\n    function(r) { console.log('Cool'); }\r\n  )();\r\n}\r\nscopeCheck();\r\n```\r\nWill throw ```ReferenceError: scopeVar is not defined```\r\n\r\nHowever, **callbacks are scope aware** so you needn't be as careful with them.\r\n\r\n\r\nRecursion\r\n---------\r\n\r\nYou can accomplish recursion simply by naming your functions as you pass them to Multithread\r\n```js\r\nMT.process(\r\n  function Recurse(m, n) {\r\n    if(n>0) {\r\n      return Recurse(m + 1, n--);\r\n    } else {\r\n      return m;\r\n    }\r\n  },\r\n  function(r) {\r\n    console.log(r);\r\n  }\r\n)(5, 2);\r\n\r\n// This will increase m twice recursively and log \"7\"\r\n```\r\n\r\n\r\nOther Warnings\r\n--------------\r\n\r\nBe aware of the limitations of multithreading in JavaScript.\r\n\r\nAll variables passed to functions must be JSON-serializable, meaning only Arrays, Objects, and base types (Number, String, Boolean, null). Same with return variables. No custom objects or prototypes.\r\n\r\nObjects and Arrays, as passed to any threaded function, will be deep-copied (passed by value, not reference).\r\n\r\n\r\nThank You\r\n---------\r\n\r\nThanks, and have fun! :)\r\n\r\nFeedback is always appreciated. (Stars, forks, criticisms, you name it!)\r\n\r\nYou can follow me on twitter at http://twitter.com/keithwhor or visit my website at http://keithwhor.com/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}